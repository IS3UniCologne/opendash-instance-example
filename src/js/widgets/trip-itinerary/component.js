var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Loading, useTranslation } from "@opendash/core";
import { HighchartsChart } from "@opendash/plugin-highcharts";
import { createWidgetComponent } from "@opendash/plugin-monitoring";
import { useDataFetchDimensionValues, useDataService, } from "@opendash/plugin-timeseries";
import * as turf from "@turf/turf";
import * as React from "react";
import { Icon } from "@opendash/icons";
import { Button, Checkbox, Divider, Input, Layout, Space } from "antd";
import { getFeatureCollections } from "@opendash/plugin-miaas/dist/components/GeographySelector";

function check_correct_district(position, districts) {
    let positionInDistrict = "_other";
    const [lon, lat] = position.geometry.coordinates;
    for (const district of districts) {
        if (lat > district.bbox[3] ||
            lat < district.bbox[1] ||
            lon > district.bbox[2] ||
            lon < district.bbox[0]) {
            continue;
        }
        if (turf.booleanWithin(position, district.geometry)) {
            positionInDistrict = district.properties.name;
        }
    }
    return positionInDistrict
}


export default createWidgetComponent((_a) => {
    var { config } = _a, context = __rest(_a, ["config"]);
    const t = useTranslation();
    const DataService = useDataService();
    const itemDimensionConfig = context.useItemDimensionConfig();
    const fetchingConfig = context.useFetchConfig();
    const itemConfig = React.useMemo(() => itemDimensionConfig.map(([item]) => item), [itemDimensionConfig]);
    const [nameFilter, setNameFilter] = React.useState();
    const name = React.useMemo(() => itemConfig.map((item) => DataService.getItemName(item)).join(", "), [itemConfig]);
    const [loadGraph, setLoadGraph] = React.useState(false);
    const [collapsed, setCollapsed] = React.useState(true);
    const [districts, setDistricts] = React.useState(null);
    context.setLoading(false);
    context.setName(t("highcharts:dependency.name", { name }));
    const data = useDataFetchDimensionValues(itemDimensionConfig, fetchingConfig);
    const { width, height } = context.useContainerSize();
    React.useEffect(() => {
        const init = () => __awaiter(void 0, void 0, void 0, function* () {
            const x = yield getFeatureCollections(config.type, config.type === "json"
                ? config.districts
                : config.type === "dimension"
                    ? config.districtFromDimension
                    : config.districtsFromZones);
            setDistricts(x.flatMap((entry) => entry.features));
        });
        init();
    }, [config.districts, config.type, config.districtFromDimension]);
    const filterEntries = {};
    const [filter, setFilter] = React.useState(filterEntries);
    React.useEffect(() => {
        if (districts) {
            const filters = {};
            districts.forEach((district) => {
                filters[district.properties.name] = true;
            });
            setFilter(filters);
        }
    }, [districts]);
    const seriesDataAll = React.useMemo(() => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        setLoadGraph(true);
        if (data.length === 0)
            return [];
        const mapOfDistricts = {};
        mapOfDistricts._other = {};
        districts.forEach((district) => {
            mapOfDistricts[district.properties.name] = {};
            districts.forEach((district2) => {
                mapOfDistricts[district.properties.name][district2.properties.name] = 0;
            })
            mapOfDistricts[district.properties.name]._other = 0;
            mapOfDistricts._other[district.properties.name] = 0;
        });
        for (let idx = 0; idx < data[0][2].length; idx++) {
            const start_position = data[0][2][idx].value;
            const end_position = data[1][2][idx].value;
            let positionInDistrict = check_correct_district(start_position, districts);
            let positionInEndDistrict = check_correct_district(end_position, districts);
            mapOfDistricts[positionInDistrict][positionInEndDistrict] += 1;
        }
        const res = Object.keys(mapOfDistricts).flatMap((from) => {
            return Object.keys(mapOfDistricts[from]).map((to) => {
                return [
                    from === "_other" ? "sonstiges" : from,
                    to === "_other" ? "sonstiges" : to,
                    mapOfDistricts[from][to],
                ];
            });
        });
        setLoadGraph(false);
        return res;
    }, [data, districts]);
    const options = React.useMemo(() => {
        const result = {
            title: {
                text: null,
            },
            accessibility: {
                point: {
                    valueDescriptionFormat: "{index}. From {point.from} to {point.to}: {point.weight}.",
                },
            },
            plotOptions: {},
            credits: {
                enabled: false,
            },
            series: [
                {
                    type: "dependencywheel",
                    keys: ["from", "to", "weight"],
                    //@ts-ignore
                    data: seriesDataAll.filter((entry) => {
                        return filter[entry[0]];
                    }),
                    name: name,
                    dataLabels: {
                        color: "#333",
                        textPath: {
                            enabled: true,
                            attributes: {
                                dy: 5,
                            },
                        },
                        // @ts-ignore
                        distance: 10,
                    },
                    // @ts-ignore
                    size: "95%",
                },
            ],
        };
        return result;
    }, [config, seriesDataAll, filter]);
    const widthOfGraph = React.useMemo(() => {
        return width - (!collapsed ? 300 : 0);
    }, [width, collapsed]);
    return (React.createElement(Layout, { style: { background: "transparent" } },
        React.createElement(Layout.Content, null,
            !loadGraph && (React.createElement(HighchartsChart, { options: options, width: widthOfGraph, height: height })),
            loadGraph && React.createElement(Loading, { message: "..." })),
        React.createElement(Layout.Sider, {
            collapsed: collapsed, style: {
                width: 300,
                background: "transparent",
                padding: 5,
                height,
                overflowY: "auto",
            }
        },
            collapsed && (React.createElement(Button, {
                ghost: true, onClick: () => {
                    setCollapsed(false);
                }, icon: React.createElement(Icon, { icon: "fa:arrow-left" })
            })),
            !collapsed && (React.createElement(React.Fragment, null,
                React.createElement(Input, {
                    value: nameFilter || "", onChange: (e) => {
                        setNameFilter(e.target.value);
                    }, placeholder: "..."
                }),
                React.createElement(Space, { direction: "horizontal", style: { marginTop: 5 } },
                    React.createElement(Button, {
                        ghost: true, icon: React.createElement(Icon, { icon: "fa:check-double" }), onClick: () => {
                            setFilter((current) => {
                                const x = Object.assign({}, current);
                                let oldState = false;
                                Object.keys(x).forEach((key, index) => {
                                    if (index === 0) {
                                        oldState = x[key];
                                    }
                                    x[key] = !oldState;
                                });
                                return x;
                            });
                        }
                    }),
                    React.createElement(Button, {
                        ghost: true, icon: React.createElement(Icon, { icon: "fa:exchange-alt" }), onClick: () => {
                            setFilter((current) => {
                                const x = Object.assign({}, current);
                                Object.keys(x).forEach((key, index) => {
                                    x[key] = !x[key];
                                });
                                return x;
                            });
                        }
                    }),
                    React.createElement(Button, {
                        ghost: true, icon: React.createElement(Icon, { icon: "fa:arrow-right" }), onClick: () => {
                            setCollapsed(true);
                        }
                    })),
                React.createElement(Divider, null),
                React.createElement("div", null, Object.entries(filter)
                    .filter((entry) => {
                        return entry[0].indexOf(nameFilter) != -1 || !nameFilter;
                    })
                    .map(([state, checked]) => {
                        return (React.createElement("div", { key: state },
                            React.createElement(Checkbox, {
                                checked: checked, onChange: (e) => {
                                    const newChecked = e.target.checked;
                                    setFilter((current) => (Object.assign(Object.assign({}, current), { [state]: newChecked })));
                                }
                            }, state)));
                    })))))));
});
//# sourceMappingURL=data:application/json;base64,